import httpx
import re
from typing import Dict, Any, List
from app.core.config import settings
from app.core.api_error_handler import APIErrorHandler


class AIContentDetectionService:
    MAX_TEXT_LENGTH = 5000

    def __init__(self):
        self.client = httpx.AsyncClient()

    async def detect_ai_content(self, text: str) -> Dict[str, Any]:
        text = self._prepare_text(text)
        ai_probability, used_api = await self._analyze_text(text)

        confidence = 0.9 if used_api else 0.3

        return {
            "overall_ai_probability": ai_probability,
            "confidence": confidence,
        }

    async def _analyze_text(self, text: str) -> tuple[float, bool]:
        if not settings.WINSTON_AI_API_KEY:
            return self._basic_ai_detection(text), False

        try:
            response = await self.client.post(
                settings.WINSTON_AI_API,
                headers={
                    "Authorization": f"Bearer {settings.WINSTON_AI_API_KEY}",
                    "Content-Type": "application/json",
                },
                json={
                    "text": text,
                    "version": "latest",
                    "sentences": False,
                    "language": "en",
                },
            )

            success, error_info = APIErrorHandler.handle_api_response(
                "Winston AI", response
            )
            if not success:
                return self._basic_ai_detection(text), False

            data = response.json()
            if "error" in data or data.get("status") != 200:
                return self._basic_ai_detection(text), False

            ai_score = float(data.get("score", 0.0))
            return ai_score / 100.0, True
        except Exception:
            pass

        return self._basic_ai_detection(text), False

    def _basic_ai_detection(self, text: str) -> float:
        ai_indicators = [
            r"\bas an ai\b",
            r"\bi am an ai\b",
            r"\bai-generated\b",
            r"\bgenerated by\b",
            r"\bai assistant\b",
            r"\blarge language model\b",
        ]

        generic_phrases = [
            r"\bexcellent communication skills\b",
            r"\bstrong problem-solving abilities\b",
            r"\bteam player\b",
            r"\bdetail-oriented\b",
            r"\bresults-driven\b",
        ]

        ai_score = 0.0
        generic_score = 0.0

        text_lower = text.lower()

        for pattern in ai_indicators:
            if re.search(pattern, text_lower):
                ai_score += 0.3

        for pattern in generic_phrases:
            if re.search(pattern, text_lower):
                generic_score += 0.1

        return min(ai_score + (generic_score * 0.5), 1.0)

    def _prepare_text(self, text: str) -> str:
        text = text.strip()

        if len(text) > self.MAX_TEXT_LENGTH:
            text = text[: self.MAX_TEXT_LENGTH]

        if len(text) < 300:
            text = text + " " * (300 - len(text))

        return text

    async def close(self):
        await self.client.aclose()
